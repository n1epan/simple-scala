/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//package org.apache.spark.examples.streaming

import kafka.serializer.StringDecoder
import org.apache.spark.SparkConf
import org.apache.spark.streaming._
import org.apache.spark.streaming.kafka._

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: NetworkWordCount <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example org.apache.spark.examples.streaming.NetworkWordCount localhost 9999`
 */
object KafkaReader{
  def main(args: Array[String]) {
    if (args.length < 1) {
      System.err.println("Usage: KafkaReader <topic>")
      System.exit(1)
    }

    //StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("KafkaReader").set("spark.akka.frameSize", "500").set("spark.akka.askTimeout", "30").set("spark.core.connection.ack.wait.timeout", "600")
    val ssc = new StreamingContext(sparkConf, Seconds(60))

    // Kafka
    //val kafkaParams = Map[String, String]("metadata.broker.list"->"kafka-useast1b-node1.dev.bosecm.com:9092", "auto.offset.reset"->"smallest")
    val kafkaParams = Map[String, String]("metadata.broker.list"->"kafka-useast1b-node1.dev.bosecm.com:9092")
    val topic = Set(args(0))
    val kafkaStream = KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](
	ssc, kafkaParams,topic)
    val msgs = kafkaStream.map(_._2)
    val lines = msgs.filter(msgs=> msgs.contains("\\\"transportEvent\\\": \\\"started\\\""))
    val fields = lines.flatMap(_.split(","))
    val artists = fields.filter(fields => fields.contains("\"artist\""))
    val counts = artists.map((_,1)).reduceByKey(_ + _)
    val cnt = counts.map{case(name, count) => (count, name)}.transform(rdd=>rdd.sortByKey(false))
    cnt.print()

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    /**
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.print()
    **/

    ssc.start()
    ssc.awaitTermination()
  }
}
